// Generated by CoffeeScript 1.10.0
(function() {
  var app, checkLinkReturns200, config, fs, jp, req, requireCover, server, should, testData;

  requireCover = require('./requireCover')('app');

  fs = require('fs');

  server = requireCover('serverClass');

  should = require('should');

  testData = requireCover('testData');

  config = requireCover('config');

  jp = require('JSONPath')["eval"];

  req = require("request");

  app = server();

  checkLinkReturns200 = function(url, linkRequestComplete) {
    return req({
      uri: url,
      method: "GET"
    }, function(err, res, body) {
      if (err != null) {
        console.log('Error: ');
        console.dir(err);
      } else {
        if (res.statusCode === 200) {
          console.log("200 OK for: " + url);
        } else {
          console.log(res.statusCode + " NOT OK for: " + url);
        }
      }
      return linkRequestComplete();
    });
  };

  describe("Link checking", function() {
    return it('works well...', function(done) {
      this.timeout(180000);
      return req({
        uri: 'http://v1appcatalog.azurewebsites.net/entry',
        method: 'GET'
      }, function(err, res, body) {
        var count, data, errors, i, j, len, len1, linkRequestComplete, path, ref, results, url, urls;
        if (err != null) {
          console.log('Could not even get the App Catalog data!');
          return done();
        } else {
          data = JSON.parse(body);
          errors = [];
          urls = [];
          ref = ['href', 'downloadUrl', 'moreInfoUrl', 'thumbhref'];
          for (i = 0, len = ref.length; i < len; i++) {
            path = ref[i];
            urls.push.apply(urls, jp(data, '$..' + path));
          }
          count = urls.length * 1;
          linkRequestComplete = function() {
            count--;
            console.log('Count: ' + count);
            if (count === 0) {
              console.log('Apparently done...' + count);
              return done();
            }
          };
          results = [];
          for (j = 0, len1 = urls.length; j < len1; j++) {
            url = urls[j];
            results.push(checkLinkReturns200(url, linkRequestComplete));
          }
          return results;
        }
      });
    });
  });

  'it \'gets the list data and all links are valid\', (done) ->\ndescribe \'GET /entry returns all entries\', ->\n  it \'gets the list data and all links are valid\', (done) ->\n    req\n      uri: \'http://v1appcatalog.azurewebsites.net/entry\',\n      method: \'GET\'\n    , (err, res, body) ->\n      if err?\n        console.log \'Could not even get the App Catalog data!\'\n        done()\n      else\n        data = JSON.parse body\n        errors = []\n        urls = []\n        for path in [\'href\', \'downloadUrl\', \'moreInfoUrl\', \'thumbhref\']\n          urls.push jp(data, \'$..\' + path)...\n        \n        count = urls.length * 1\n        \n        linkRequestComplete = ->\n          count--\n          console.log \'Count: \' + count\n          if count == 0\n            console.log \'Apparently done...\' + count\n            done()\n\n        for url in urls \n          #checkSiteReturns404ForBadLink url, linkRequestComplete\n          checkLinkReturns200 url, linkRequestComplete';

}).call(this);
