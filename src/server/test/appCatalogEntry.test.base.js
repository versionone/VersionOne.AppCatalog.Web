// Generated by CoffeeScript 1.10.0
(function() {
  var AppCatalogEntry, _expectExactErrors, _getError, _getErrorExact, _validate, ex, expectErrorsEqual, expectMaxLengthsExceeded, expectMinPropertiesNotMet, expectNoErrors, expectPropertiesMissing, expectTypesInvalid, requireCover, should, test,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  requireCover = require('./requireCover')('app');

  AppCatalogEntry = requireCover('appCatalogEntry');

  should = require('should');

  test = function(description, createEntryFunc, assertFunc, assertData) {
    return it(description, function(done) {
      var entry;
      entry = createEntryFunc();
      return _validate(entry, function(errs) {
        assertFunc(errs, assertData);
        return done();
      });
    });
  };

  ex = function(exceedCount) {
    exceedCount += 2;
    return Array(exceedCount).join('-');
  };

  _validate = function(data, callback) {
    return AppCatalogEntry.validate(data, callback);
  };

  _getError = function(errs, instanceContext, constraintName, memberName) {
    var err, i, len;
    for (i = 0, len = errs.length; i < len; i++) {
      err = errs[i];
      if (err.instanceContext === instanceContext && err.constraintName === constraintName && indexOf.call(err.constraintValue, memberName) >= 0) {
        return err;
      }
    }
    return null;
  };

  _getErrorExact = function(errs, instanceContext, constraintName, constraintValue) {
    var err, i, len;
    if (errs == null) {
      return null;
    }
    for (i = 0, len = errs.length; i < len; i++) {
      err = errs[i];
      if (err.instanceContext === instanceContext && err.constraintName === constraintName && err.constraintValue === constraintValue) {
        return err;
      }
    }
    return null;
  };

  _expectExactErrors = function(errs, propertyPaths, constraintName) {
    var error, errorCollectFunc, expectedValue, missingErrors, propertyPath;
    missingErrors = [];
    errorCollectFunc = errorCollectFunc | function(errors) {};
    for (propertyPath in propertyPaths) {
      expectedValue = propertyPaths[propertyPath];
      error = _getErrorExact(errs, propertyPath, constraintName, expectedValue);
      if (error == null) {
        missingErrors.push("Missing " + constraintName + " constraint violation error for " + propertyPath);
      }
    }
    if (missingErrors.length > 0) {
      throw new Error("Expected to find " + (Object.keys(propertyPaths).length) + " " + constraintName + " constraint violation errors, but missing " + missingErrors.length + " of them! Here they are:\n" + (missingErrors.join('\n')));
    }
  };

  expectMaxLengthsExceeded = function(errs, propertyPaths) {
    return _expectExactErrors(errs, propertyPaths, 'maxLength');
  };

  expectTypesInvalid = function(errs, propertyPaths) {
    return _expectExactErrors(errs, propertyPaths, 'type');
  };

  expectMinPropertiesNotMet = function(errs, propertyPaths) {
    return _expectExactErrors(errs, propertyPaths, 'minProperties');
  };

  expectPropertiesMissing = function(errs, propertyPaths) {
    var error, i, len, missingErrors, propertyName, propertyNames, propertyPath;
    missingErrors = [];
    for (propertyPath in propertyPaths) {
      propertyNames = propertyPaths[propertyPath];
      for (i = 0, len = propertyNames.length; i < len; i++) {
        propertyName = propertyNames[i];
        error = _getError(errs, propertyPath, 'required', propertyName);
        if (error == null) {
          missingErrors.push("Missing required constraint violation error for " + propertyPath + "/" + propertyName);
        }
      }
    }
    if (missingErrors.length > 0) {
      throw new Error("Expected to find " + propertyNames.length + " required constraint violation errors, but missing " + missingErrors.length + " of them! Here they are:\n" + (missingErrors.join('\n')));
    }
  };

  expectNoErrors = function(errs) {
    return should.not.exist(errs);
  };

  expectErrorsEqual = function(errs, data) {
    var index, results, value;
    results = [];
    for (index in data) {
      value = data[index];
      results.push(errs[Number(index)].should.eql(value));
    }
    return results;
  };

  module.exports = {
    test: test,
    ex: ex,
    expectPropertiesMissing: expectPropertiesMissing,
    expectTypesInvalid: expectTypesInvalid,
    expectMaxLengthsExceeded: expectMaxLengthsExceeded,
    expectMinPropertiesNotMet: expectMinPropertiesNotMet,
    expectNoErrors: expectNoErrors,
    expectErrorsEqual: expectErrorsEqual
  };

}).call(this);
